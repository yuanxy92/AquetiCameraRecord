#ifndef SWIG
#include <stdint.h>
#endif //SWIG

#include "AtlTypes.h"
/**

  \file Types.h

  also nifty macros for type id strings and default vals
  useful typedefs 
  good for c and c++

  to see the code generated by these macros, use:
  g++ -E AtlPropertyTypes.h  | sed -s "s/;\ /;\n/g" > PropertyTypesOutput.h

*/
#ifndef ATL_PROPERTY_TYPES_H
#define ATL_PROPERTY_TYPES_H


/**
  \defgroup ATL_PROPERTY_MACROS atl property macros
  macros for property id,type,and default val
@{
**/

#ifdef __cplusplus


// the x groups below specify property name, type, and default value
#define ATL_PROPERTY_LIST \
	X(ATL_AUTO_EXPOSURE, bool, true) \
	X(ATL_AUTO_FRAMERATE, bool, true) \
	X(ATL_AUTO_GAIN, bool, true) \
	X(ATL_AUTO_SATURATION, bool, true) \
	X(ATL_AUTO_SHUTTER, bool, true) \
	X(ATL_AUTO_WHITEBALANCE, bool, true) \
	X(ATL_AUTO_SHARPENING, bool, true) \
	X(ATL_AUTO_CONTRAST, bool, true) \
	X(ATL_AUTO_DENOISE, bool, true) \
	X(ATL_AUTO_FOCUS, bool, true) \
	X(ATL_AUTO_JPEG_QUALITY, bool, true) \
	X(ATL_FRAMERATE, double, 30.0) \
	X(ATL_FRAMERATE_VARIANCE, double, 0) \
	X(ATL_FRAMERATE_REQUEST, double, 30.0) \
	X(ATL_FRAMERATE_DIVIDER, int, 1) \
	X(ATL_FRAMERATE_RANGE, AtlRange_64f, {0}) \
	X(ATL_GAIN, double, 1.0) \
	X(ATL_COLOR_TEMP,double ,1.0)\
	X(ATL_COLOR_TEMP_RANGE,AtlRange_64f,{0}) \
	X(ATL_COLOR_TEMP_ESTIMATE, uint64_t, 0) \
	X(ATL_SCENE_LUX_ESTIMATE, double, 0.0) \
	X(ATL_GAIN_RANGE, AtlRange_64f, {0}) \
	X(ATL_SATURATION, double, 1.0) \
	X(ATL_SATURATION_RANGE, AtlRange_64f, {0}) \
	X(ATL_EXPOSURE_TARGET, double, 1.0) \
	X(ATL_EXPOSURE_TARGET_RANGE, AtlRange_64f, {}) \
	X(ATL_WHITEBALANCE, AtlWhiteBalance, {0}) \
	X(ATL_WHITEBALANCE_GAIN_RANGE, AtlRange_64f, {}) \
	X(ATL_WHITEBALANCE_MODE, int, 0) \
	X(ATL_SHUTTER, double, 0) \
	X(ATL_SHUTTER_RANGE, AtlRange_64f, {0}) \
	X(ATL_PIXEL_CLOCK, double, 0) \
	X(ATL_SENSOR_ROI, AtlRectangle, {0}) \
	X(ATL_WHITEBALANCE_OFFSET, double, 0) \
	X(ATL_COLOR_MAT_ENABLE, bool, false) \
	X(ATL_FLICKER_MODE, int, 0) \
	X(ATL_WHITEBALANCE_REGION, AtlRectangle, {0}) \
	X(ATL_FRAME_DURATION_RANGE, AtlRange_64f, {0}) \
	X(ATL_IMAGE_CENTER_OFFSET, AtlPoint, {0}) \
	X(ATL_SENSOR_MODE, int, 0) \
	X(ATL_SCALE_MODE, int, 0) \
	X(ATL_NUM_SENSOR_MODES, int, 1) \
	X(ATL_SUPPORTS_FOCUS, bool, false) \
    X(ATL_FOCUS_NORMALIZED, double, 0) \
	X(ATL_FOCUS_DRIVER_RESET, int, 0) \
	X(ATL_FOCUS_MOTOR_STATUS, int, 0) \
	X(ATL_AUTOFOCUS_INTERRUPT, int, 0) \
	X(ATL_AUTOFOCUS_STATUS, int, 0) \
	X(ATL_IR_FILTER, bool, true) \
	X(ATL_SUPPORTS_APERTURE, bool, false) \
	X(ATL_APERTURE, double, 1.0) \
	X(ATL_APERTURE_RANGE, AtlRange_64f, {0}) \
	X(ATL_SENSOR_ID, uint64_t, 0) \
	X(ATL_MODULE_ID, uint64_t, 0) \
    X(ATL_MODULE_ADDRESS, std::string, "") \
	X(ATL_NUM_CAMERAS, int, 0) \
	X(ATL_MIPI_SLOT, int, 0) \
	X(ATL_TILE_ID, uint64_t, 0) \
	X(ATL_RESOLUTION, AtlSize, {}) \
	X(ATL_FOCAL_LENGTH, double, 0) \
	X(ATL_PIXEL_SIZE, double, 1.62e-6) \
	X(ATL_IFOV, double, 0) \
	X(ATL_COMPRESSION_PARAMETERS, AtlCompressionParameters, {0}) \
	\
	X(ATL_NET_TX_RATE, double, 0) \
	X(ATL_NET_RX_RATE, double, 0) \
	X(ATL_CPU_HZ, double, 0) \
	X(ATL_CPU_NUM_CORES, double, 0) \
	X(ATL_GPU_HZ, double, 0) \
	X(ATL_GPU_ID, std::string, "unknown") \
	X(ATL_NUM_GPUS, int, 0) \
	X(ATL_RAM_TOTAL, uint64_t, 0) \
	X(ATL_RAM_FREE, uint64_t, 0) \
	X(ATL_CPU_LOAD, double, 0) \
	X(ATL_GPU_LOAD, double, 0) \
	X(ATL_STORAGE_USE, uint64_t, 0) \
	X(ATL_STORAGE_SIZE, uint64_t, 0) \
	X(ATL_UPTIME, uint64_t, 0) \
	\
	X(ATL_CPU_TEMP, double, 0) \
	X(ATL_GPU_TEMP, double, 0) \
	X(ATL_CPU_CRITICAL_TEMP, double, 66) \
	X(ATL_GPU_CRITICAL_TEMP, double, 66) \
	X(ATL_BOARD_TEMP, double, 0) \
	X(ATL_BOARD_CRITICAL_TEMP, double, 0) \
	\
	X(ATL_NOISE_REDUCTION_MODE, int, 0) \
	X(ATL_NOISE_REDUCTION_STRENGTH, double, 0.5) \
	X(ATL_NOISE_REDUCTION_STRENGTH_RANGE, AtlRange_64f, {}) \
	X(ATL_EDGE_ENHANCE_MODE, int, 0) \
	X(ATL_EDGE_ENHANCE_STRENGTH, double, 0.5) \
	X(ATL_EDGE_ENHANCE_STRENGTH_RANGE, AtlRange_64f, {}) \
	\
	X(ATL_OUTPUT_MODE, int, 0) \
	X(ATL_COMPRESSION_TYPE, int, 0) \
	X(ATL_JPEG_QUALITY, int, 90) \
	X(ATL_JPEG_QUALITY_RANGE, AtlRange_32s, {0}) \
	X(ATL_H264_BITRATE, int, 0) \
	X(ATL_H264_PROFILE, int, 0) \
	X(ATL_H264_LEVEL_MAJOR, int, 5) \
	X(ATL_H264_LEVEL_MINOR, int, 0) \
	X(ATL_H264_IFRAME_INTERVAL, int, 10) \
	\
	X(ACI_MAX_CACHE_SIZE, int, 64) \
	X(ACI_CACHE_FRAMERATE, double, 30) \
    \
	X(ACI_TRANSMITTER_QMAX, int, 64) \
    X(ACI_ADD_TRANSMITTER_CONNECTION, std::string, "")\
    X(ACI_REMOVE_TRANSMITTER_CONNECTION, std::string, "")\
    X(ACI_START_STREAMING_MCAM, int, 0)\
    X(ACI_STOP_STREAMING_MCAM, int, 0)\
    X(ACI_STREAMING_TILE_FILTER, uint64_t, 0)\
    X(ACI_TRANSMITTER_TOTAL_BYTES, uint64_t, 0)\
    X(ACI_TRANSMITTER_SENT_BYTES, uint64_t, 0)\
    X(ACI_TRANSMITTER_SENT_FRAMES, uint64_t, 0)\
    X(ACI_TRANSMITTER_DROPPED_FRAMES, uint64_t, 0)\
    \
	X(ATL_STREAMING_INTERRUPT, bool, false) \
	X(ATL_STREAMING_POLICY, int, 0) \
	X(ATL_NEW_CAMERA_STREAM_INTERRUPT, uint64_t, 0) \
	X(ATL_STREAM_ID, uint64_t, 0) \
	X(ATL_IP_ADDR_INTERRUPT, std::string, "127.0.0.1:9000") \
	X(ACI_NEW_BURST_INTERRUPT, std::string, "") \
    X(ACI_FRAME_COUNT, uint64_t, 0) \
    X(ACI_SENT_FAILURE_COUNT, uint64_t, 0) \
	\
	X(ATL_CONTRAST, double, 0) \
	X(ATL_CONTRAST_RANGE, AtlRange_64f, {0}) \
	X(ATL_SHARPENING, double, 0) \
	X(ATL_SHARPENING_RANGE, AtlRange_64f, {0}) \
	X(ATL_DENOISE, double, 0) \
	X(ATL_DENOISE_RANGE, AtlRange_64f, {0}) \
    \
	X(ATL_INTERRUPT_CREATED, atl::InterruptCreated, {}) \
	X(ATL_PROPERTY_CREATED, atl::PropertyCreated, {}) \
	X(ATL_PROPERTYMANAGER_CREATED, atl::PropertyManagerCreated, {}) \
	X(ATL_INTERRUPT_REMOVED, atl::InterruptRemoved, {}) \
	X(ATL_PROPERTY_REMOVED, atl::PropertyRemoved, {}) \
	X(ATL_PROPERTYMANAGER_REMOVED, atl::PropertyManagerRemoved, {}) \
	X(ATL_DONE_SYNCING, bool, {}) \
	X(ATL_CONNECTION_STATUS, bool, {}) \
	\
	\
	X(ATL_GAIN_RANGE_MIN, double, 0 ) \
	X(ATL_GAIN_RANGE_MAX, double, 24.77 ) \
	X(ATL_CONTRAST_RANGE_MIN, double, 0 ) \
	X(ATL_CONTRAST_RANGE_MAX, double, 100 ) \
	X(ATL_SHARPENING_RANGE_MIN, double, 0 ) \
	X(ATL_SHARPENING_RANGE_MAX, double, 1 ) \
	X(ATL_DENOISE_RANGE_MIN, double, 0 ) \
	X(ATL_DENOISE_RANGE_MAX, double, 1 ) \
	X(ATL_SHUTTER_RANGE_MIN, double, 0.015 ) \
	X(ATL_SHUTTER_RANGE_MAX, double, 17.701 ) \
	X(ATL_SATURATION_RANGE_MIN, double, 0 ) \
	X(ATL_SATURATION_RANGE_MAX, double, 2 ) \
	X(ATL_FRAMERATE_RANGE_MIN, double, 1 ) \
	X(ATL_FRAMERATE_RANGE_MAX, double, 60 ) \
	X(ATL_JPEG_QUALITY_RANGE_MIN, double, 0 ) \
	X(ATL_JPEG_QUALITY_RANGE_MAX, double, 100 ) \
	X(ATL_EXPOSURE_TARGET_RANGE_MIN, double, -10)\
	X(ATL_EXPOSURE_TARGET_RANGE_MAX, double, 10)\
	X(ATL_COLOR_TEMP_RANGE_MIN, double, 0)\
	X(ATL_COLOR_TEMP_RANGE_MAX, double, 5)\
	X(ATL_WHITEBALANCE_GAIN_RANGE_MIN, double, 0)\
	X(ATL_WHITEBALANCE_GAIN_RANGE_MAX, double, 5)\
    \
    \
	X(ATL_INFO_MESSAGE, atl::Message, {})\
	X(ATL_WARNING_MESSAGE, atl::Message, {})\
	X(ATL_ERROR_MESSAGE, atl::Message, {})\
	X(ATL_CRITICAL_ERROR_MESSAGE, atl::Message, {})\
    \
    \
    X(V2_VERSION, std::string, "")\
    X(V2_GIT_BRANCH, std::string, "")\
    X(V2_GIT_COMMIT_HASH, std::string, "")\
    X(V2_BUILD_DATE, std::string, "")\
    X(V2_CREATE_CAMERA_INTERRUPT, uint64_t, 0)\
    X(V2_DELETE_CAMERA_INTERRUPT, uint64_t, 0)\
    X(V2_CONNECTED_TO_CAMERA, bool, false)\
    X(V2_RECEIVE_CAMERA_DATA, bool, false)\
    X(V2_CAMERA_CREATED_INTERRUPT, uint64_t, 0)\
    X(V2_CAMERA_DELETED_INTERRUPT, uint64_t, 0)\
    X(V2_RECORDING, int, 0)\
    X(V2_CLIP_CREATED_INTERRUPT, atl::ACOS_CLIP_STATE, {})\
    X(V2_DELETE_CLIP_INTERRUPT, atl::ACOS_CLIP_STATE, {})\
    X(V2_CLIP_DELETED_INTERRUPT, atl::ACOS_CLIP_STATE, {})\
    X(V2_IMAGE_REQUEST_INTERRUPT, atl::ACOS_IMAGE_REQUEST_STATE, {})\
    X(V2_REQUEST_RECORDING_METADATA_INTERRUPT, bool, false)\
    X(V2_RECORDING_METADATA_INTERRUPT, atl::ACOS_CLIP_STATE, {})\
    X(V2_NUM_TEGRAS, int, 0)\
    X(V2_NUM_CONNECTED_TEGRAS, int, 0)\
    X(V2_NUM_MCAMS, uint64_t, 0)\
    X(V2_REMOVE_CONNECTIONS, std::string, "")\
    X(V2_CREATE_LIVE_STREAM_INTERRUPT, atl::STREAM_REQUEST_STATE, {})\
    X(V2_CREATE_CLIP_STREAM_INTERRUPT, atl::STREAM_REQUEST_STATE, {})\
    X(V2_CREATE_MCAM_STREAM_INTERRUPT, atl::STREAM_REQUEST_STATE, {})\
    X(V2_DELETE_STREAM_INTERRUPT, uint64_t, 0)\
    X(V2_CONNECT_TO_STREAM_INTERRUPT, std::string, "")\
    X(V2_DISCONNECT_FROM_STREAM_INTERRUPT, std::string, "")\
    X(V2_TRIGGER_PROCESSING_THREAD_INTERRUPT, bool, false)\
    X(V2_PROCESSING_THREAD_ENABLED, bool, false)\
    X(V2_DISABLE_PROCESSING_THREAD_LOOP_INTERRUPT, std::string, "")\
    X(V2_UPDATE_CAMERA_MODEL_INTERRUPT, std::string, "")\
    X(V2_UPDATE_SESSION_MODELS_INTERRUPT, atl::SESSION_MODEL_STATE, {})\
    X(V2_LATEST_TIME, uint64_t, 0)\
    X(V2_FRAME_COMPRESSION_TYPE, int, 0)\
    X(V2_CAMERA_TIME_SYNC, uint64_t, 0)\
    \
    X(V2_STREAM_TYPE, std::string, "")\
    X(V2_SET_PLAY_SPEED_INTERRUPT, double, 1.0)\
    X(V2_FRAME_STEP_INTERRUPT, int, 0)\
    X(V2_JUMP_TO_TIME_INTERRUPT, uint64_t, 0)\
    X(V2_GO_LIVE_INTERRUPT, bool, true)\
    X(V2_GO_TO_CLIP_START_INTERRUPT, bool, true)\
    X(V2_SET_PTZ_VELOCITY_INTERRUPT, atl::ACOS_PTZ_VELOCITY_STATE, {})\
    X(V2_SET_PTZ_ABSOLUTE_INTERRUPT, atl::ACOS_PTZ_ABSOLUTE_STATE, {})\
    X(V2_PAN_RANGE, atl::AtlDoubleRangeState, {})\
    X(V2_TILT_RANGE, atl::AtlDoubleRangeState, {})\
    X(V2_ZOOM_RANGE, atl::AtlDoubleRangeState, {})\
    X(V2_GAIN_RANGE, atl::AtlFloatRangeState, {})\
    X(V2_OFFSET_RANGE, atl::AtlFloatRangeState, {})\
    X(V2_GAMMA_RANGE, atl::AtlFloatRangeState, {})\
    X(V2_GAIN, double, 1.0)\
    X(V2_OFFSET, double, 0)\
    X(V2_GAMMA, double, 1.0)\
    X(V2_DENOISE, bool, true)\
    X(V2_DENOISE_PIXEL_BLUR_RANGE, atl::AtlFloatRangeState, {})\
    X(V2_DENOISE_BRIGHTNESS_BLUR_RANGE, atl::AtlFloatRangeState, {})\
    X(V2_DENOISE_SMOOTH, double, 1.0)\
    X(V2_DENOISE_EDGE, double, 0.2)\
    X(V2_CHANGE_ENCODING_INTERRUPT, atl::VIDEO_ENCODER_STATE, {})\
    X(V2_BOX_ZOOM, atl::ACOS_NORMALIZED_BOX_STATE, {})\
    \
    X(V2_MCAM_STREAM_SCALE, uint64_t, 1)\
    \
    X(V2_OPEN_LIVE_VIEWER_INTERRUPT, uint64_t, 0)\
    X(V2_OPEN_CLIP_VIEWER_INTERRUPT, atl::ACOS_CLIP_STATE, {})\
    X(V2_CLOSE_VIEWER_INTERRUPT, uint64_t, 0)\
    \
    X(V2_STORAGE_FULL_INTERRUPT, std::string, "")\
    X(V2_SHUTDOWN_INTERRUPT, bool, false)\
    X(V2_STORAGE_DIRECTORY, std::string, "")\
    X(V2_AUTO_DELETE_DATA, bool, false)\
    X(V2_DRIVE_USAGE, double, 0)\
    \
    X(ACI_SAVE_STATE_INTERRUPT, std::string, "")\
    X(ACI_LOAD_STATE_INTERRUPT, std::string, "")\
	X(ACI_UPDATE_CONFIG_INTERRUPT, int, 0) \
    


// this macro uses preprocessor to declare propery names as strings of same name
// unless ATL_PROPERTY_LIST_NO_DEFINE is defined
#ifndef ATL_PROPERTY_LIST_NO_DEFINE

#define X(PROP,TYPE,VAL) const char * const PROP = #PROP;
ATL_PROPERTY_LIST
#undef X

#endif


/*  DEFAULTS:
//to define the defaults in your code use the lines below:

// these temporarily disable unused variable warnings
// don't think this works in gcc < 6, but does no harm
// work for gcc and clang, if neither, nothing is disabled
// TODO learn how to use windows to test similar 
#ifdef __clang__ 
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-variable"
#elif __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-variable"
#endif

// makes a variable for each named TYPE PROP_DEFAULT set equal to VAL 
#define X(PROP, TYPE, VAL) const TYPE PROP ## _DEFAULT = VAL;
ATL_PROPERTY_LIST
#undef X

// reenables unused variable warnings
// TODO as above, make it work in winders
#ifdef __clang__
#pragma clang diagnostic pop
#elif __GNUC__
#pragma GCC diagnostic pop
#endif

*/

/*
#define X(PROP,TYPE,VAL) typedef TYPE PROP ## _t;
ATL_PROPERTY_LIST
#undef X
*/



#endif

#define ATL_WHITE_BALANCE_MODE_MANUAL 0					//!< White balance manual
#define ATL_WHITE_BALANCE_MODE_AUTO 1					//!< White balance auto
#define ATL_WHITE_BALANCE_MODE_SUNLIGHT 2				//!< White balance sunlight
#define ATL_WHITE_BALANCE_MODE_FLUORESCENT 3			//!< White balance fluorescent
#define ATL_WHITE_BALANCE_MODE_SHADE 4					//!< White balance shade
#define ATL_WHITE_BALANCE_MODE_TUNGSTEN 5				//!< White balance tungsten
#define ATL_WHITE_BALANCE_MODE_CLOUDY 6					//!< White balance cloudy
#define ATL_WHITE_BALANCE_MODE_INCANDESCENT 7			//!< White balance incandescent
#define ATL_WHITE_BALANCE_MODE_HORIZON 8				//!< White balance horizon
#define ATL_WHITE_BALANCE_MODE_FLASH 9					//!< White balance flash

#define ATL_NOISE_REDUCTION_MODE_OFF 0					//!< Noise reduction off
#define ATL_NOISE_REDUCTION_MODE_FAST 1					//!< Noise reduction fast
#define ATL_NOISE_REDUCTION_MODE_HQ 2					//!< Noise reduction HQ

#define ATL_EDGE_ENHANCE_MODE_OFF 0						//!< Enhance mode off
#define ATL_EDGE_ENHANCE_MODE_FAST 1					//!< Enhance mode fast
#define ATL_EDGE_ENHANCE_MODE_HQ 2						//!< Enhance mode HQ

#define ATL_FLICKER_REDUCTION_MODE_OFF 0				//!< Flicker reduction off
#define ATL_FLICKER_REDUCTION_MODE_AUTO 1				//!< Flicker reduction auto
#define ATL_FLICKER_REDUCTION_MODE_50HZ 2				//!< Flicker reduction 50Hz
#define ATL_FLICKER_REDUCTION_MODE_60HZ 3				//!< Flicker reduction 60Hz

#define ATL_SCALE_MODE_ALL 0							//!< Scale all
#define ATL_SCALE_MODE_4K 1								//!< Scale 4K
#define ATL_SCALE_MODE_HD 2								//!< Scale HD

#define ATL_SENSOR_MODE_4K_30 0							//!< Sensor 4K 30
#define ATL_SENSOR_MODE_4K_60 1							//!< Sensor 4K 60
#define ATL_SENSOR_MODE_HD_60 2							//!< Sensor HD 60

#define ATL_FOCUS_MOTOR_IDLE 0                          //!< Motor Idle
#define ATL_FOCUS_MOTOR_ACTIVE 1                        //!< Motor Active
#define ATL_FOCUS_MOTOR_END 2                           //!< Motor End
#define ATL_FOCUS_MOTOR_RUNNING 3                       //!< Motor Running
#define ATL_FOCUS_MOTOR_ERROR 4                         //!< Motor Error

#define ATL_BITRATE_H264_HIGH 30000000
#define ATL_BITRATE_H264_MEDIUM 20000000
#define ATL_BITRATE_H264_LOW 10000000

#define ATL_BITRATE_H265_HIGH 15000000
#define ATL_BITRATE_H265_MEDIUM 10000000
#define ATL_BITRATE_H265_LOW 5000000

/** 
  tiling/scaling schema
  form: ATL_TILING_x_y_z
  tiling is x,y eg 2x2, 3x3
  z is scales 
**/
#define ATL_TILING_1_1_2 0								//!< Tiling 1x1, scale 2
#define ATL_TILING_2_2_2 1								//!< Tiling 2x2, scale 2

#define ATL_TILE_4K 0									//!< Tile 4K
#define ATL_TILE_HD 1									//!< Tile HD


#define ATL_OUTPUT_MODE_RAW 0							//!< Raw output
#define ATL_OUTPUT_MODE_JPEG 1							//!< JPEG output
#define ATL_OUTPUT_MODE_H264 2							//!< H264 output
#define ATL_OUTPUT_MODE_H265 3							//!< H265 output

// ATL IMAGE MODES
#define ATL_MODE_NONE 0									//!< No ATL image mode
#define ATL_MODE_GRAY 1									//!< Gray ATL image mode
#define ATL_MODE_GRBG 2									//!< GRBG ATL image mode
#define ATL_MODE_BGGR 3									//!< BGGR ATL image mode
#define ATL_MODE_RGB 4									//!< RGB ATL image mode
#define ATL_MODE_BGR 5									//!< BGR ATL image mode
#define ATL_MODE_JPEG_RGB 6								//!< RBG JPEG ATL image mode
#define ATL_MODE_YUV_422 7								//!< YUV 422 ATL image mode
#define ATL_MODE_BGRA 8									//!< BGRA ATL image mode
#define ATL_MODE_BT601_YUV_422 9						//!< YUV 422 BT601 ATL image mode
#define ATL_MODE_RGGB 10								//!< RGGB ATL image mode
#define ATL_MODE_I420 11								//!< I420 ATL image mode
#define ATL_MODE_FGRAY 21								//!< FGRAY ATL image mode
#define ATL_MODE_FGRBG 22								//!< FGRBG ATL image mode
#define ATL_MODE_FBGGR 23								//!< FBGGR ATL image mode
#define ATL_MODE_FRGB  24								//!< FRGB ATL image mode
#define ATL_MODE_FBGR  25								//!< FBGR ATL image mode
#define ATL_MODE_FJPEG_RGB 26							//!< FJPEG RGB ATL image mode
#define ATL_MODE_FYUV_422 27							//!< FYUV 422 ATL image mode
#define ATL_MODE_FBGRA 28								//!< FBGRA ATL image mode
#define ATL_MODE_FBT601_YUV_422 29						//!< FBT601 YUV 422 ATL image mode
#define ATL_MODE_FRGGB 30								//!< FRGGB ATL image mode
#define ATL_MODE_H264_I_FRAME 31						//!< H264 I-frame ATL image mode
#define ATL_MODE_H264_P_FRAME 32						//!< H264 P-frame ATL image mode
#define ATL_MODE_H265_I_FRAME 33						//!< H265 I-frame ATL image mode
#define ATL_MODE_H265_P_FRAME 34						//!< H265 P-frame ATL image mode


// V2 STREAM TYPES (INTERNAL USE)
//TODO remove these and replace internal TYPE references with the ACOS STREAM TYPE macros
#define V2_STREAM_TYPE_RENDER_LIVE "AquetiRenderStream_live"
#define V2_STREAM_TYPE_RENDER_CLIP "AquetiRenderStream_clip"
#define V2_STREAM_TYPE_MCAM "AquetiMcamStream"


// ACOS STREAM TYPES
#define ACOS_STREAM_RENDER_LIVE 0
#define ACOS_STREAM_RENDER_CLIP 1
#define ACOS_STREAM_MCAM 2

// V2 RENDER OUTPUT ENCODINGS
#define V2_ENCODE_NONE "window"
#define V2_ENCODE_JPEG "JPEG"
#define V2_ENCODE_H264 "H264"
#define V2_ENCODE_H265 "H265"


// ACOS_CLIP ENCODINGS
#define V2_CLIP_NULL 0
#define V2_CLIP_JPEG 1
#define V2_CLIP_H264 2
#define V2_CLIP_H265 3


// V2 PROCESSING THREAD IDENTIFIERS
#define V2_GLOBAL_WHITE_BALANCE "AquetiGlobalWhiteBalanceThread"		//!< Global white balance thread
#define V2_GLOBAL_SHUTTER "AquetiGlobalShutterThread" 				//!< Global shutter thread
#define V2_GLOBAL_GAIN "AquetiGlobalGainThread" 				//!< Global gain thread
/** @} **/




#endif

